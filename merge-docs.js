/**
 * Merge Vitepress Documentation
 * This script merges all markdown files from a Vitepress documentation directory into a single markdown file.
 *
 * Usage:
 * node merge-docs.js
 *
 * Make sure to update the `docsDir`, `outputFile`, and `configFile` variables to match your project structure.
 * It will generate a merged markdown file with a table of contents and the content of each file.
 **/

const fs = require('fs');
const path = require('path');

// Configuration - update these paths based on your project structure
const docsDir = './v5.6.x'; // The directory containing your Vitepress markdown files
const outputFile = './merged-docs.md'; // The output file path
const configFile = './docs/.vitepress/config.js'; // Path to your Vitepress config file (to use sidebar order if available)

// Function to recursively get all markdown files in a directory
function getAllMarkdownFiles(dir) {
    let results = [];
    const list = fs.readdirSync(dir);

    list.forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);

        if (stat && stat.isDirectory() && !file.startsWith('.')) {
            // Recurse into subdirectories, but skip hidden directories like .vitepress
            results = results.concat(getAllMarkdownFiles(filePath));
        } else if (path.extname(file) === '.md') {
            results.push(filePath);
        }
    });

    return results;
}

// Function to extract title from markdown file
function extractTitle(content) {
    // Look for # title or YAML frontmatter title
    const titleMatch = content.match(/^#\s+(.+)$/m) ||
        content.match(/^---[\s\S]+?title:\s*(.+?)[\s\S]+?---/m);

    return titleMatch ? titleMatch[1].trim() : null;
}

// Try to get sidebar configuration from config file
function getSidebarOrder() {
    try {
        if (fs.existsSync(configFile)) {
            const configContent = fs.readFileSync(configFile, 'utf8');

            // This is a simple regex to extract sidebar items - might need adjustment based on your config format
            const sidebarMatch = configContent.match(/sidebar:\s*(\[[\s\S]+?\]|\{[\s\S]+?\})/);

            if (sidebarMatch) {
                // Note: This is a simple approach and might not work for all config formats
                // For a robust solution, you might need to use a JavaScript parser
                const orderMap = new Map();

                // Extract file paths from the sidebar config
                const paths = sidebarMatch[1].match(/['"]([^'"]+\.md)['"]/g) || [];

                paths.forEach((path, index) => {
                    const cleanPath = path.replace(/['"]/g, '');
                    orderMap.set(cleanPath, index);
                });

                return orderMap;
            }
        }
    } catch (error) {
        console.error('Error reading sidebar configuration:', error);
    }

    return null;
}

// Main function
async function mergeMarkdownFiles() {
    // Get all markdown files
    const files = getAllMarkdownFiles(docsDir);
    console.log(`Found ${files.length} markdown files`);

    // Try to get sidebar order
    const sidebarOrder = getSidebarOrder();

    // Sort files by sidebar order if available, otherwise sort by filepath
    if (sidebarOrder) {
        files.sort((a, b) => {
            const relativeA = path.relative(docsDir, a);
            const relativeB = path.relative(docsDir, b);

            const orderA = sidebarOrder.get(relativeA) ?? Number.MAX_SAFE_INTEGER;
            const orderB = sidebarOrder.get(relativeB) ?? Number.MAX_SAFE_INTEGER;

            return orderA - orderB;
        });
    } else {
        // If no sidebar order is available, sort alphabetically by path
        files.sort();
    }

    // Create output stream
    const outputStream = fs.createWriteStream(outputFile);

    // Write a header for the merged file
    outputStream.write(`# Merged Vitepress Documentation\n\n`);
    outputStream.write(`*This file was automatically generated by merging all markdown files from the Vitepress documentation.*\n\n`);
    outputStream.write(`## Table of Contents\n\n`);

    // Generate Table of Contents
    for (const file of files) {
        const content = fs.readFileSync(file, 'utf8');
        const title = extractTitle(content) || path.basename(file, '.md');
        const relativePath = path.relative(docsDir, file);

        outputStream.write(`- [${title}](#${title.toLowerCase().replace(/[^\w]+/g, '-')})\n`);
    }

    outputStream.write(`\n---\n\n`);

    // Process each file
    for (const file of files) {
        try {
            console.log(`Processing: ${file}`);
            let content = fs.readFileSync(file, 'utf8');

            // Remove YAML frontmatter if present
            content = content.replace(/^---[\s\S]+?---\n/m, '');

            // Add file path as a comment for reference
            const relativePath = path.relative(docsDir, file);
            outputStream.write(`<!-- Source: ${relativePath} -->\n\n`);

            // Write the content
            outputStream.write(content);

            // Add separator between files
            outputStream.write(`\n\n---\n\n`);
        } catch (error) {
            console.error(`Error processing file ${file}:`, error);
        }
    }

    // Close the output stream
    outputStream.end();

    console.log(`Merged documentation written to ${outputFile}`);
}

// Run the script
mergeMarkdownFiles().catch(error => {
    console.error('Error:', error);
});