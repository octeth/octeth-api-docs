import{_ as s,o as e,c as o,S as n}from"./chunks/framework.f15d8f8c.js";const u=JSON.parse('{"title":"Error Handling","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"error-handling.md","filePath":"error-handling.md","lastUpdated":1692452207000}'),a={name:"error-handling.md"},r=n(`<h1 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h1><p>When interacting with the Octeth API, it&#39;s important to handle errors correctly to ensure your application runs smoothly. This section will guide you through how errors are returned and how to interpret them.</p><h2 id="error-responses" tabindex="-1">Error Responses <a class="header-anchor" href="#error-responses" aria-label="Permalink to &quot;Error Responses&quot;">​</a></h2><p>Most API endpoints return a <code>200</code> HTTP status code, even when an error occurs. However, the response body will contain a JSON error message. Some newer API endpoints may return a <code>4xx</code> or <code>5xx</code> HTTP response code. These are explicitly defined in the API calls.</p><p>Here&#39;s an example of an error response:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">Success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">ErrorCode</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>In this example, the <code>Success</code> field is <code>false</code>, indicating an error has occurred. The <code>ErrorCode</code> is <code>1</code>, which means the <code>SubscriberListName</code> parameter is missing or empty. Each API endpoint has its own list of error codes.</p><h2 id="common-error-codes" tabindex="-1">Common Error Codes <a class="header-anchor" href="#common-error-codes" aria-label="Permalink to &quot;Common Error Codes&quot;">​</a></h2><p>Here are some common error codes you might encounter:</p><ul><li><p>Error Code <code>3</code>: Invalid login information. This error occurs when the login information provided in the User.Login API call is invalid:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">Success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">ErrorCode</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">ErrorText</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Invalid login information</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>Error Code <code>99998</code>: Authorization error. This error occurs when the provided APIKey or SessionID parameter is invalid.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">Success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">ErrorCode</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">99998</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ul><h2 id="handling-errors" tabindex="-1">Handling Errors <a class="header-anchor" href="#handling-errors" aria-label="Permalink to &quot;Handling Errors&quot;">​</a></h2><p>While the Octeth API does not require any specific steps for handling errors or retrying failed requests, it&#39;s a good practice to check the <code>Success</code> field in every API response. If <code>Success</code> is <code>false</code>, check the <code>ErrorCode</code> and <code>ErrorText</code> fields to understand what went wrong.</p><p>Remember, each API endpoint has its own list of error codes. Always refer to the specific API endpoint documentation for a complete list of possible error codes and their meanings.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><p>While there are no specific best practices for error handling with the Octeth API, it&#39;s generally a good idea to:</p><ul><li>Always check the Success field in the API response.</li><li>Understand the meaning of each ErrorCode you encounter.</li><li>Handle errors gracefully in your application to ensure a smooth user experience.</li></ul>`,16),l=[r];function t(p,c,i,d,h,D){return e(),o("div",null,l)}const F=s(a,[["render",t]]);export{u as __pageData,F as default};
